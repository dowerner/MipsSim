<Window x:Class="MipsSim.View.HelpView"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        Title="Help" Height="420" Width="496">
    <Grid>
        <TabControl >
            <TabItem Header="Mips Instructions">
                <Grid>
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="140"/>
                        <ColumnDefinition Width="*"/>
                    </Grid.ColumnDefinitions>
                    <Grid.RowDefinitions>
                        <RowDefinition Height="22"/>
                        <RowDefinition Height="*"/>
                    </Grid.RowDefinitions>
                    <TextBlock FontWeight="Bold" FontSize="14" TextAlignment="Center" VerticalAlignment="Center" Text="Instruction"/>
                    <TextBlock FontWeight="Bold" Grid.Column="1" FontSize="14" TextAlignment="Center" VerticalAlignment="Center" Text="Description"/>
                    <ScrollViewer Grid.Row="1" Grid.ColumnSpan="2">
                        <StackPanel Margin="10">
                            <Grid>
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition Width="140"/>
                                    <ColumnDefinition Width="*"/>
                                </Grid.ColumnDefinitions>
                                <Grid.RowDefinitions>
                                    <RowDefinition Height="64"/>
                                    <RowDefinition Height="64"/>
                                    <RowDefinition Height="64"/>
                                    <RowDefinition Height="64"/>
                                    <RowDefinition Height="64"/>
                                    <RowDefinition Height="64"/>
                                    <RowDefinition Height="64"/>
                                    <RowDefinition Height="64"/>
                                    <RowDefinition Height="64"/>
                                    <RowDefinition Height="64"/>
                                    <RowDefinition Height="64"/>
                                    <RowDefinition Height="64"/>
                                    <RowDefinition Height="64"/>
                                    <RowDefinition Height="64"/>
                                    <RowDefinition Height="64"/>
                                    <RowDefinition Height="64"/>
                                    <RowDefinition Height="64"/>
                                    <RowDefinition Height="64"/>
                                    <RowDefinition Height="64"/>
                                    <RowDefinition Height="64"/>
                                    <RowDefinition Height="64"/>
                                    <RowDefinition Height="64"/>
                                    <RowDefinition Height="64"/>
                                    <RowDefinition Height="64"/>
                                    <RowDefinition Height="64"/>
                                    <RowDefinition Height="64"/>
                                    <RowDefinition Height="64"/>
                                    <RowDefinition Height="64"/>
                                    <RowDefinition Height="64"/>
                                    <RowDefinition Height="64"/>
                                    <RowDefinition Height="64"/>
                                    <RowDefinition Height="64"/>
                                    <RowDefinition Height="64"/>
                                    <RowDefinition Height="64"/>
                                    <RowDefinition Height="64"/>
                                    <RowDefinition Height="64"/>
                                    <RowDefinition Height="64"/>
                                    <RowDefinition Height="64"/>
                                    <RowDefinition Height="64"/>
                                    <RowDefinition Height="64"/>
                                    <RowDefinition Height="64"/>
                                    <RowDefinition Height="64"/>
                                    <RowDefinition Height="64"/>
                                    <RowDefinition Height="64"/>
                                    <RowDefinition Height="64"/>
                                    <RowDefinition Height="64"/>
                                    <RowDefinition Height="64"/>
                                    <RowDefinition Height="64"/>
                                    <RowDefinition Height="64"/>
                                    <RowDefinition Height="64"/>
                                </Grid.RowDefinitions>
                                <TextBlock VerticalAlignment="Center" Grid.Column="0" Grid.Row="0">add $rd, $rs, $rt</TextBlock>
                                <TextBlock VerticalAlignment="Center"  Grid.Column="1" Grid.Row="0" TextWrapping="Wrap">
	Add $rs and $rt and store the result in $rd (with overflow).
                                </TextBlock>
                                <TextBlock VerticalAlignment="Center" Grid.Column="0" Grid.Row="1">addu $rd, $rs, $rt</TextBlock>
                                <TextBlock VerticalAlignment="Center"  Grid.Column="1" Grid.Row="1" TextWrapping="Wrap">
	Add $rs and $rt and store the result in $rd  (no overflow)
                                </TextBlock>
                                <TextBlock VerticalAlignment="Center" Grid.Column="0" Grid.Row="2">and $rd, $rs, $rt</TextBlock>
                                <TextBlock VerticalAlignment="Center"  Grid.Column="1" Grid.Row="2" TextWrapping="Wrap">
	Does a bitwise and with $rs and $rt and stores the result in $rd.
                                </TextBlock>
                                <TextBlock VerticalAlignment="Center" Grid.Column="0" Grid.Row="3">div $rs, $rt</TextBlock>
                                <TextBlock VerticalAlignment="Center"  Grid.Column="1" Grid.Row="3" TextWrapping="Wrap">
	Divides $rs by $rt and stores the quotient in $lo and the remainder in $hi.
                                </TextBlock>
                                <TextBlock VerticalAlignment="Center" Grid.Column="0" Grid.Row="4">divu $rs, $rt</TextBlock>
                                <TextBlock VerticalAlignment="Center"  Grid.Column="1" Grid.Row="4" TextWrapping="Wrap">
	Divides $rs by $rt and stores the quotient in $lo and the remainder in $hi.
                                </TextBlock>
                                <TextBlock VerticalAlignment="Center" Grid.Column="0" Grid.Row="5">jalr $rd, $rs</TextBlock>
                                <TextBlock VerticalAlignment="Center"  Grid.Column="1" Grid.Row="5" TextWrapping="Wrap">
	Saves the instruction address of the following instruction to the $ra register and then jumps to the address saved in $rs.
                                </TextBlock>
                                <TextBlock VerticalAlignment="Center" Grid.Column="0" Grid.Row="6">jr $rs</TextBlock>
                                <TextBlock VerticalAlignment="Center"  Grid.Column="1" Grid.Row="6" TextWrapping="Wrap">
	Jumps to the address saved in $rs.
                                </TextBlock>
                                <TextBlock VerticalAlignment="Center" Grid.Column="0" Grid.Row="7">mfhi $rd</TextBlock>
                                <TextBlock VerticalAlignment="Center"  Grid.Column="1" Grid.Row="7" TextWrapping="Wrap">
	Moves word from $hi to $rd.
                                </TextBlock>
                                <TextBlock VerticalAlignment="Center" Grid.Column="0" Grid.Row="8">mflo $rd</TextBlock>
                                <TextBlock VerticalAlignment="Center"  Grid.Column="1" Grid.Row="8" TextWrapping="Wrap">
	Moves word from $lo to $rd.
                                </TextBlock>
                                <TextBlock VerticalAlignment="Center" Grid.Column="0" Grid.Row="9">mthi $rs</TextBlock>
                                <TextBlock VerticalAlignment="Center"  Grid.Column="1" Grid.Row="9" TextWrapping="Wrap">
	Moves $rs to $hi.
                                </TextBlock>
                                <TextBlock VerticalAlignment="Center" Grid.Column="0" Grid.Row="10">mtlo $rs</TextBlock>
                                <TextBlock VerticalAlignment="Center"  Grid.Column="1" Grid.Row="10" TextWrapping="Wrap">
	Moves $rs to $lo
                                </TextBlock>
                                <TextBlock VerticalAlignment="Center" Grid.Column="0" Grid.Row="11">mult $rs, $rt</TextBlock>
                                <TextBlock VerticalAlignment="Center"  Grid.Column="1" Grid.Row="11" TextWrapping="Wrap">
	Multiplies $rs with $rt and stores the (possible 64bit) result $lo (first 32bit) and $hi (last 32bit).
                                </TextBlock>
                                <TextBlock VerticalAlignment="Center" Grid.Column="0" Grid.Row="12">multu $rs, $rt</TextBlock>
                                <TextBlock VerticalAlignment="Center"  Grid.Column="1" Grid.Row="12" TextWrapping="Wrap">
	Multiplies $rs with $rt and stores the (possible 64bit) result $lo (first 32bit) and $hi (last 32bit).
                                </TextBlock>
                                <TextBlock VerticalAlignment="Center" Grid.Column="0" Grid.Row="13">nor $rd, $rs, $rt</TextBlock>
                                <TextBlock VerticalAlignment="Center"  Grid.Column="1" Grid.Row="13" TextWrapping="Wrap">
	Does perform a bitwise nor operation of $rs and $rt and stores the result in $rd.
                                </TextBlock>
                                <TextBlock VerticalAlignment="Center" Grid.Column="0" Grid.Row="14">or $rd, $rs, $rt</TextBlock>
                                <TextBlock VerticalAlignment="Center"  Grid.Column="1" Grid.Row="14" TextWrapping="Wrap">
	Does perform a bitwise or operation of $rs and $rt and stores the result in $rd.
                                </TextBlock>
                                <TextBlock VerticalAlignment="Center" Grid.Column="0" Grid.Row="15">sll $rd, $rt, amount</TextBlock>
                                <TextBlock VerticalAlignment="Center"  Grid.Column="1" Grid.Row="15" TextWrapping="Wrap">
	Shifts the word in $rt bitwise to the left by a given amount and stores the result in $rd.
                                </TextBlock>
                                <TextBlock VerticalAlignment="Center" Grid.Column="0" Grid.Row="16">sllv $rd, $rt, $rs</TextBlock>
                                <TextBlock VerticalAlignment="Center"  Grid.Column="1" Grid.Row="16" TextWrapping="Wrap">
	Shifts the word in $rt bitwise to the left by the value of $rs and stores the result in $rd.
                                </TextBlock>
                                <TextBlock VerticalAlignment="Center" Grid.Column="0" Grid.Row="17">slt $rd, $rs, $rt</TextBlock>
                                <TextBlock VerticalAlignment="Center"  Grid.Column="1" Grid.Row="17" TextWrapping="Wrap">
	Sets $rd to 1 if $rs is smaller than $rt.
                                </TextBlock>
                                <TextBlock VerticalAlignment="Center" Grid.Column="0" Grid.Row="18">sltu $rd, $rs, $rt</TextBlock>
                                <TextBlock VerticalAlignment="Center"  Grid.Column="1" Grid.Row="18" TextWrapping="Wrap">
	Sets $rd to 1 if $rs is smaller than $rt.
                                </TextBlock>
                                <TextBlock VerticalAlignment="Center" Grid.Column="0" Grid.Row="19">sra $rd, $rt, amount</TextBlock>
                                <TextBlock VerticalAlignment="Center"  Grid.Column="1" Grid.Row="19" TextWrapping="Wrap">
	Shifts the word in $rt bitwise to the right by a given amount of $rs and stores the result in $rd.
                                </TextBlock>
                                <TextBlock VerticalAlignment="Center" Grid.Column="0" Grid.Row="20">srav $rd, $rt, $rs</TextBlock>
                                <TextBlock VerticalAlignment="Center"  Grid.Column="1" Grid.Row="20" TextWrapping="Wrap">
	Shifts the word in $rt bitwise to the right by the value of $rs and stores the result in $rd.
                                </TextBlock>
                                <TextBlock VerticalAlignment="Center" Grid.Column="0" Grid.Row="21">srl $rd, $rt, amount</TextBlock>
                                <TextBlock VerticalAlignment="Center"  Grid.Column="1" Grid.Row="21" TextWrapping="Wrap">
	Shifts the word in $rt bitwise to the right by a given amount of $rs and stores the result in $rd.
                                </TextBlock>
                                <TextBlock VerticalAlignment="Center" Grid.Column="0" Grid.Row="22">srlv $rd, $rt, $rs</TextBlock>
                                <TextBlock VerticalAlignment="Center"  Grid.Column="1" Grid.Row="22" TextWrapping="Wrap">
	Shifts the word in $rt bitwise to the right by the value of $rs and stores the result in $rd.
                                </TextBlock>
                                <TextBlock VerticalAlignment="Center" Grid.Column="0" Grid.Row="23">sub $rd, $rs, $rt</TextBlock>
                                <TextBlock VerticalAlignment="Center"  Grid.Column="1" Grid.Row="23" TextWrapping="Wrap">
	Subtract $rt from $rs and store the result in $rd.
                                </TextBlock>
                                <TextBlock VerticalAlignment="Center" Grid.Column="0" Grid.Row="24">subu $rd, $rs, $rt</TextBlock>
                                <TextBlock VerticalAlignment="Center"  Grid.Column="1" Grid.Row="24" TextWrapping="Wrap">
	Subtract $rt from $rs and store the result in $rd.
                                </TextBlock>
                                <TextBlock VerticalAlignment="Center" Grid.Column="0" Grid.Row="25">xor $rd, $rs, $rt</TextBlock>
                                <TextBlock VerticalAlignment="Center"  Grid.Column="1" Grid.Row="25" TextWrapping="Wrap">
	Does perform a bitwise xor operation on $rs and $rt and stores the result in $rd.
                                </TextBlock>
                                <TextBlock VerticalAlignment="Center" Grid.Column="0" Grid.Row="26">addi $rt, $rs, immediate</TextBlock>
                                <TextBlock VerticalAlignment="Center"  Grid.Column="1" Grid.Row="26" TextWrapping="Wrap">
	Adds a constant value to $rs and stores the result in $rt (with overflow).
                                </TextBlock>
                                <TextBlock VerticalAlignment="Center" Grid.Column="0" Grid.Row="27">addiu $rt, $rs, immediate</TextBlock>
                                <TextBlock VerticalAlignment="Center"  Grid.Column="1" Grid.Row="27" TextWrapping="Wrap">
	Adds a constant value to $rs and stores the result in $rt (no overflow).
                                </TextBlock>
                                <TextBlock VerticalAlignment="Center" Grid.Column="0" Grid.Row="28">andi $rt, $rs, immediate</TextBlock>
                                <TextBlock VerticalAlignment="Center"  Grid.Column="1" Grid.Row="28" TextWrapping="Wrap">
	Does a bitwise and operation on $rs and a constant value and stores the result in $rt.
                                </TextBlock>
                                <TextBlock VerticalAlignment="Center" Grid.Column="0" Grid.Row="29">beq $rs, $rt, label</TextBlock>
                                <TextBlock VerticalAlignment="Center"  Grid.Column="1" Grid.Row="29" TextWrapping="Wrap">
	Branches if the values stored in $rs and $rt are equal. The target is given by the label.
                                </TextBlock>
                                <TextBlock VerticalAlignment="Center" Grid.Column="0" Grid.Row="30">bgez $rs, label</TextBlock>
                                <TextBlock VerticalAlignment="Center"  Grid.Column="1" Grid.Row="30" TextWrapping="Wrap">
	Branches if $rs greater or equal zero. The target is given by the label.
                                </TextBlock>
                                <TextBlock VerticalAlignment="Center" Grid.Column="0" Grid.Row="31">bgtz $rs, label</TextBlock>
                                <TextBlock VerticalAlignment="Center"  Grid.Column="1" Grid.Row="31" TextWrapping="Wrap">
	Branches if $rs is greater than zero. The target is given by the label.
                                </TextBlock>
                                <TextBlock VerticalAlignment="Center" Grid.Column="0" Grid.Row="32">blez $rs, label</TextBlock>
                                <TextBlock VerticalAlignment="Center"  Grid.Column="1" Grid.Row="32" TextWrapping="Wrap">
	Branches if $rs is less or equal than zero. The target is given by the label.
                                </TextBlock>
                                <TextBlock VerticalAlignment="Center" Grid.Column="0" Grid.Row="33">bltz $rs, label</TextBlock>
                                <TextBlock VerticalAlignment="Center"  Grid.Column="1" Grid.Row="33" TextWrapping="Wrap">
	Branches if $rs is less than zero. The target is given by the label.
                                </TextBlock>
                                <TextBlock VerticalAlignment="Center" Grid.Column="0" Grid.Row="34">bne $rs, $rt, label</TextBlock>
                                <TextBlock VerticalAlignment="Center"  Grid.Column="1" Grid.Row="34" TextWrapping="Wrap">
	Branches if $rs and $rt are not equal. The target is given by the label.
                                </TextBlock>
                                <TextBlock VerticalAlignment="Center" Grid.Column="0" Grid.Row="35">lb $rt, immediate(rs)</TextBlock>
                                <TextBlock VerticalAlignment="Center"  Grid.Column="1" Grid.Row="35" TextWrapping="Wrap">
	Load byte from memory that is stored at the address $rs with a given offset.
                                </TextBlock>
                                <TextBlock VerticalAlignment="Center" Grid.Column="0" Grid.Row="36">lbu $rt, immediate(rs)</TextBlock>
                                <TextBlock VerticalAlignment="Center"  Grid.Column="1" Grid.Row="36" TextWrapping="Wrap">
	Load byte from memory that is stored at the address $rs with a given offset.
                                </TextBlock>
                                <TextBlock VerticalAlignment="Center" Grid.Column="0" Grid.Row="37">lh $rt, immediate(rs)</TextBlock>
                                <TextBlock VerticalAlignment="Center"  Grid.Column="1" Grid.Row="37" TextWrapping="Wrap">
	Load halfword from memory that is stored at the address $rs with a given offset.
                                </TextBlock>
                                <TextBlock VerticalAlignment="Center" Grid.Column="0" Grid.Row="38">lhu $rt, immediate(rs)</TextBlock>
                                <TextBlock VerticalAlignment="Center"  Grid.Column="1" Grid.Row="38" TextWrapping="Wrap">
	Load halfword from memory that is stored at the address $rs with a given offset.
                                </TextBlock>
                                <TextBlock VerticalAlignment="Center" Grid.Column="0" Grid.Row="39">lui $rt, immediate</TextBlock>
                                <TextBlock VerticalAlignment="Center"  Grid.Column="1" Grid.Row="39" TextWrapping="Wrap">
	Stores the 16bit immidiate value in the upper region of $rt including the MSB.
                                </TextBlock>
                                <TextBlock VerticalAlignment="Center" Grid.Column="0" Grid.Row="40">lw $rt, immediate(rs)</TextBlock>
                                <TextBlock VerticalAlignment="Center"  Grid.Column="1" Grid.Row="40" TextWrapping="Wrap">
	Load word from memory that is stored at the address $rs with a given offset.
                                </TextBlock>
                                <TextBlock VerticalAlignment="Center" Grid.Column="0" Grid.Row="41">ori $rt, $rs, immediate</TextBlock>
                                <TextBlock VerticalAlignment="Center"  Grid.Column="1" Grid.Row="41" TextWrapping="Wrap">
	Does a bitwise or operation on $rs and a constant and stores the result in $rt.
                                </TextBlock>
                                <TextBlock VerticalAlignment="Center" Grid.Column="0" Grid.Row="42">sb $rt, immediate(rs)</TextBlock>
                                <TextBlock VerticalAlignment="Center"  Grid.Column="1" Grid.Row="42" TextWrapping="Wrap">
	Store byte in memory at the address $rs with a given offset.
                                </TextBlock>
                                <TextBlock VerticalAlignment="Center" Grid.Column="0" Grid.Row="43">slti $rt, $rs, immediate</TextBlock>
                                <TextBlock VerticalAlignment="Center"  Grid.Column="1" Grid.Row="43" TextWrapping="Wrap">
	Set $rt to 1 if $rs is smaller than a given constant.
                                </TextBlock>
                                <TextBlock VerticalAlignment="Center" Grid.Column="0" Grid.Row="44">sltiu $rt, $rs, immediate</TextBlock>
                                <TextBlock VerticalAlignment="Center"  Grid.Column="1" Grid.Row="44" TextWrapping="Wrap">
	Set $rt to 1 if $rs is smaller than a given constant.
                                </TextBlock>
                                <TextBlock VerticalAlignment="Center" Grid.Column="0" Grid.Row="45">sh $rt, immediate(rs)</TextBlock>
                                <TextBlock VerticalAlignment="Center"  Grid.Column="1" Grid.Row="45" TextWrapping="Wrap">
	Store halfword in memory at the address $rs with a given offset.
                                </TextBlock>
                                <TextBlock VerticalAlignment="Center" Grid.Column="0" Grid.Row="46">sw $rt, immediate(rs)</TextBlock>
                                <TextBlock VerticalAlignment="Center"  Grid.Column="1" Grid.Row="46" TextWrapping="Wrap">
	Store word in memory at the address $rs with a given offset.
                                </TextBlock>
                                <TextBlock VerticalAlignment="Center" Grid.Column="0" Grid.Row="47">xori $rt, $rs, immediate</TextBlock>
                                <TextBlock VerticalAlignment="Center"  Grid.Column="1" Grid.Row="47" TextWrapping="Wrap">
	Does a bitwise xor on $rs and a given constant and stores the result in $rt.
                                </TextBlock>
                                <TextBlock VerticalAlignment="Center" Grid.Column="0" Grid.Row="48">j label</TextBlock>
                                <TextBlock VerticalAlignment="Center"  Grid.Column="1" Grid.Row="48" TextWrapping="Wrap">
	Jumps to a label.
                                </TextBlock>
                                <TextBlock VerticalAlignment="Center" Grid.Column="0" Grid.Row="49">jal label</TextBlock>
                                <TextBlock VerticalAlignment="Center"  Grid.Column="1" Grid.Row="49" TextWrapping="Wrap">
	Saves the instruction address of the following instruction to the $ra register and then jumps to a label.
                                </TextBlock>
                            </Grid>
                        </StackPanel>
                    </ScrollViewer>
                </Grid>
            </TabItem>
            <TabItem Header="Editor Usage">
                <ScrollViewer>
                    <StackPanel Margin="10">
                        <TextBlock FontWeight="Bold" FontSize="18" Text="General Information" />
                        <TextBlock Margin="0,0,0,10">
                            There are some things that have to be considered while working with this software.
                        </TextBlock>
                        <TextBlock FontWeight="Bold" FontSize="14" Text="Working with imported memory/registers" />
                        <TextBlock Margin="0,0,0,10" TextWrapping="Wrap">
                            When working with imported registers and/or memory it is important to disable the checkboxes that activate the "Reset on compile". If this is not done before execution all imported data will be lost.
                        </TextBlock>
                        <TextBlock FontWeight="Bold" FontSize="14" Text="Frame and Stack Pointer" />
                        <TextBlock Margin="0,0,0,10" TextWrapping="Wrap">
                            When working with imported registers and/or memory the frame and stack pointers have to be set to other values than zero or otherwise the data section will be zero since it does pick its part of the memory to display acoring to those 2 registers.
                        </TextBlock>
                        <TextBlock FontWeight="Bold" FontSize="14" Text="NO Pseudoinstruction" />
                        <TextBlock Margin="0,0,0,10" TextWrapping="Wrap">
                            Pseudoinstruction like move, bge, ... are not yet implemented and do not work. Look at the Mips Instruction tab to get a list of all supported instructions.
                        </TextBlock>
                        <TextBlock FontWeight="Bold" FontSize="18" Text="Options" />
                        <TextBlock Margin="0,0,0,10" TextWrapping="Wrap">
                            In the menubar it can be chosen which format (binary, hexadecimal, decimal) the memory viewer and the register viewer should use to display data.
                        </TextBlock>
                        <TextBlock Margin="0,0,0,10" TextWrapping="Wrap">
                            In the settings menu the size of the main memory can be altered. A new size will only be accepted if it lies within a valid range.
                        </TextBlock>
                        <TextBlock FontWeight="Bold" FontSize="14" Text="Executing code" />
                        <TextBlock Margin="0,0,0,10" TextWrapping="Wrap">
                            To execute the code in the editor it first needs to be compiled. This can be achieved by clicking on the green play button in the menubar. If there are errors in the code which prohibits the translation into Mips instructions a compiler error will be displayed and the line will be marked red.
                        </TextBlock>
                        <TextBlock Margin="0,0,0,10" TextWrapping="Wrap">
                            If the code could be compiled successful the instructions will be visibly in the memory viewer in binary format. To execute instructions the green step button has to be clicked. To stop the execution the red stop button can be clicked.
                        </TextBlock>
                        <TextBlock FontWeight="Bold" FontSize="18" Text="Code Editor" />
                        <TextBlock Margin="0,0,0,10" TextWrapping="Wrap">
                            The code editor enables the user to write his assembler code. Via "File->Open" an (*.a) assembler file can be opened and edited further.
                        </TextBlock>
                        <TextBlock Margin="0,0,0,10" TextWrapping="Wrap">
                            The editor does number every line and does keep line indents on a line break.
                        </TextBlock>
                        <TextBlock FontWeight="Bold" FontSize="18" Text="Memory View" />
                        <TextBlock Margin="0,0,0,10" TextWrapping="Wrap">
                            The memory view displays parts of the simulated memory. The parts are dynamically chosen depending on the amount of addresses that are occupied by the compiled program.
                        </TextBlock>
                        <TextBlock Margin="0,0,0,10" TextWrapping="Wrap">
                            From within the File menu or via rigth click on the memory viewer the current content of the memory can be written to a file. It is also possible to edit single memory cells or to load an entire memory file back. On compilation the entire memory gets zeroed so if a memory state should influence the execution of a program it has to be loaded during execution and not before.
                        </TextBlock>
                        <TextBlock FontWeight="Bold" FontSize="14" Text="Instruction section" />
                        <TextBlock Margin="0,0,0,10" TextWrapping="Wrap">
                            The instruction section is the part of the main memory were the compiled instructions are saved to. The program counter (PC) is set to the first address of the first instruction. During execution the first address of an instruction will be marked green to show the last executed instruction.
                        </TextBlock>
                        <TextBlock FontWeight="Bold" FontSize="14" Text="Data section" />
                        <TextBlock Margin="0,0,0,10" TextWrapping="Wrap">
                            The data section is the part of the memory were stack- and framepointer are pointing to. Data can be stored in this section. If a word is saved to the memory the first address of the word will be highlighted green.
                        </TextBlock>
                        <TextBlock FontWeight="Bold" FontSize="18" Text="Register View" />
                        <TextBlock Margin="0,0,0,10">
                            This view shows alle registers of the CPU and their current content.
                        </TextBlock>
                        <TextBlock Margin="0,0,0,10">
                            By right-clicking the register section or via the file menu the register content can be saved or loaded.
                        </TextBlock>
                    </StackPanel>
                </ScrollViewer>
            </TabItem>
        </TabControl>
    </Grid>
</Window>
